{"id":"goread2-1","title":"Load more articles does not work right","description":"","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-13T17:52:14.51498-07:00","updated_at":"2025-10-14T17:42:11.668547-07:00","closed_at":"2025-10-14T17:42:11.668547-07:00"}
{"id":"goread2-10","title":"Add HTTP caching headers to improve performance and reduce server load","description":"Add appropriate HTTP caching headers to API endpoints and static assets to improve repeat visit performance and reduce server load by ~60%.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.336676-07:00","updated_at":"2025-10-14T18:43:55.359776-07:00","external_ref":"gh-20"}
{"id":"goread2-11","title":"Implement bundle splitting to reduce initial load time by 33%","description":"Implement bundle splitting to lazy-load modal code, reducing initial JavaScript bundle from 42KB to ~28KB.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.384019-07:00","updated_at":"2025-10-14T18:43:55.428189-07:00","closed_at":"2025-10-14T18:43:55.428189-07:00","external_ref":"gh-19"}
{"id":"goread2-12","title":"Feeds not loading on initial page load","description":"Error in browser console: Failed to load resource: the server responded with a status of 401","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-14T18:43:55.450035-07:00","updated_at":"2025-10-14T18:43:55.492737-07:00","closed_at":"2025-10-14T18:43:55.492737-07:00","external_ref":"gh-18"}
{"id":"goread2-13","title":"Mark all as read","description":"Add mark all as read functionality","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.514985-07:00","updated_at":"2025-10-14T18:43:55.53605-07:00","external_ref":"gh-17"}
{"id":"goread2-14","title":"Search filter for feed list","description":"The feed list is gonna get long for some folks. Add a way to filter it.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.55739-07:00","updated_at":"2025-10-14T18:43:55.578415-07:00","external_ref":"gh-16"}
{"id":"goread2-15","title":"Allow me to edit the names of my feeds","description":"Note this can only affect my feeds and not everyone who subscribes to the feeds.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T18:43:55.59938-07:00","updated_at":"2025-10-14T18:43:55.620989-07:00","external_ref":"gh-15"}
{"id":"goread2-16","title":"When you add a feed, add a reasonable number of unread articles","description":"I added slashdot.org and it gave me 600+ unread articles which seems like too much","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.645304-07:00","updated_at":"2025-10-14T18:43:55.68732-07:00","closed_at":"2025-10-14T18:43:55.68732-07:00","external_ref":"gh-14"}
{"id":"goread2-17","title":"Feeds are not updating","description":"Feeds are not updating","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:55.708844-07:00","updated_at":"2025-10-14T18:43:55.751782-07:00","closed_at":"2025-10-14T18:43:55.751782-07:00","external_ref":"gh-13"}
{"id":"goread2-18","title":"Add other auth providers","description":"Currently only Google is supported. We should add others.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.774622-07:00","updated_at":"2025-10-14T18:43:55.797034-07:00","external_ref":"gh-12"}
{"id":"goread2-19","title":"Add user-configurable feed ordering in sidebar","description":"Currently, feeds in the left sidebar appear to be ordered by title alphabetically. Users should be able to choose how their feeds are ordered.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.818912-07:00","updated_at":"2025-10-14T18:43:55.840016-07:00","external_ref":"gh-11"}
{"id":"goread2-20","title":"Next billing date is wrong","description":"Says n/a instead of a date","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:55.861808-07:00","updated_at":"2025-10-14T18:43:55.905216-07:00","closed_at":"2025-10-14T18:43:55.905216-07:00","external_ref":"gh-10"}
{"id":"goread2-21","title":"Mobile UI","description":"One of the main reasons I built this was that I want a specific UI for my iPad.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.926091-07:00","updated_at":"2025-10-14T18:43:55.970464-07:00","closed_at":"2025-10-14T18:43:55.970464-07:00","external_ref":"gh-9"}
{"id":"goread2-22","title":"Feed names are weird?","description":"Look into where the feed names are being pulled from, there are a few that are wrong.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:55.991621-07:00","updated_at":"2025-10-14T18:43:56.038289-07:00","closed_at":"2025-10-14T18:43:56.038289-07:00","external_ref":"gh-8"}
{"id":"goread2-23","title":"Disable autocorrect in the add feed dialog","description":"No, I really DID mean to enter daringfireball as one word. And dont automatically capitalize the first letter either!","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:56.062886-07:00","updated_at":"2025-10-14T18:43:56.106245-07:00","closed_at":"2025-10-14T18:43:56.106245-07:00","external_ref":"gh-7"}
{"id":"goread2-24","title":"Feed discovery is wonky","description":"Can't find the feed for https://hachyderm.io/@mekkaokereke. Had issues with dnalounge.com too.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:56.129468-07:00","updated_at":"2025-10-14T18:43:56.172031-07:00","closed_at":"2025-10-14T18:43:56.172031-07:00","external_ref":"gh-6"}
{"id":"goread2-25","title":"Figure out weird titles","description":"Some feeds have weird titles, either gibberish or weird formats.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:56.193637-07:00","updated_at":"2025-10-14T18:43:56.236214-07:00","closed_at":"2025-10-14T18:43:56.236214-07:00","external_ref":"gh-5"}
{"id":"goread2-26","title":"Add Google Analytics","description":"Add Google Analytics so I can track myself.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:56.257518-07:00","updated_at":"2025-10-14T18:43:56.299939-07:00","closed_at":"2025-10-14T18:43:56.299939-07:00","external_ref":"gh-4"}
{"id":"goread2-27","title":"Security: Admin CLI tool allows privilege escalation in self-hosted deployments","description":"The current admin CLI tool creates a significant security vulnerability in self-hosted deployments. Anyone with filesystem access can grant themselves admin privileges.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T18:43:56.321986-07:00","updated_at":"2025-10-14T18:43:56.365761-07:00","closed_at":"2025-10-14T18:43:56.365761-07:00","external_ref":"gh-3"}
{"id":"goread2-28","title":"Standardize database interface for unit testing","description":"The current database.Database interface has inconsistent method signatures and return types across its definition and implementations.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:56.387789-07:00","updated_at":"2025-10-14T18:43:56.431382-07:00","closed_at":"2025-10-14T18:43:56.431382-07:00","external_ref":"gh-2"}
{"id":"goread2-29","title":"Keyboard shortcut weirdness","description":"I have to select an article in the middle pane before I can use j to go to the next article. Should probably just highlight it by default.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:56.455394-07:00","updated_at":"2025-10-14T18:43:56.503148-07:00","closed_at":"2025-10-14T18:43:56.503148-07:00","external_ref":"gh-1"}
{"id":"goread2-3","title":"Local deployment login overwrites production login info","description":"When logging in using a local deployment, it overwrites the production login info. Need to ensure local and production environments maintain separate authentication states.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T17:45:26.886722-07:00","updated_at":"2025-10-14T18:31:24.884153-07:00","closed_at":"2025-10-14T18:31:24.884153-07:00"}
{"id":"goread2-30","title":"Add audit logging for admin operations","description":"Add audit logging to admin handler methods (SetAdminStatus at line 75 and GrantFreeMonths at line 136) to track admin actions for security and compliance. Should log user ID, action type, target, timestamp, and result.","design":"## Database Schema\nCreate audit_logs table:\n- ID, timestamp, admin_user_id, admin_email\n- operation_type (grant_admin, revoke_admin, grant_free_months, etc.)\n- target_user_id, target_user_email\n- operation_details (JSON), ip_address, result, error_message\n\n## Integration Points\n1. Web API: admin_handler.go (SetAdminStatus, GrantFreeMonths, GetUserInfo)\n2. CLI: cmd/admin/main.go (set-admin, grant-months, create-token, revoke-token, etc.)\n3. Token ops: subscription_service.go (GenerateAdminToken, RevokeAdminToken)\n\n## Audit Log Viewer\n- Web UI: GET /admin/audit-logs (pagination, filtering)\n- CLI: audit-logs command (--user, --operation, --limit)\n\n## Steps\n1. Create audit_logs table (SQLite + Datastore)\n2. Add AuditLog struct\n3. Create DB methods: CreateAuditLog, GetAuditLogs\n4. Create AuditService\n5. Integrate into all admin ops\n6. Create web handler\n7. Add CLI command\n8. Tests + docs","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-15T17:01:22.276872-07:00","updated_at":"2025-10-17T15:35:18.957493-07:00","closed_at":"2025-10-17T15:35:18.957493-07:00"}
{"id":"goread2-31","title":"Remove or convert DEBUG print statements to proper logging","description":"Replace temporary DEBUG printf statements in payment_service.go (lines 183, 192, 207, 233) and database/schema.go (lines 972, 986) with proper structured logging using log.Printf or a logging library. These debug statements were likely added for troubleshooting and should be cleaned up.","status":"open","priority":2,"issue_type":"chore","created_at":"2025-10-15T17:01:28.994749-07:00","updated_at":"2025-10-15T17:01:28.994749-07:00"}
{"id":"goread2-32","title":"Rewrite session expiration tests for database-backed sessions","description":"Update session tests in internal/auth/session_test.go (lines 262, 283) to work with database-backed sessions. The TODOs indicate these tests need to be rewritten to properly test session expiration with the current database implementation.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-15T17:01:35.487417-07:00","updated_at":"2025-10-15T19:44:39.35976-07:00","closed_at":"2025-10-15T19:44:39.35976-07:00"}
{"id":"goread2-33","title":"Add database layer unit tests","description":"The database layer (internal/database/) has 0% test coverage, which is critical infrastructure. Add comprehensive unit tests covering:\n- SQLite schema creation and migrations\n- Datastore implementation for production\n- CRUD operations for all entities (users, feeds, articles, sessions)\n- Error handling and edge cases\n- Transaction management\nTests should use mock/fixture data and test both SQLite and Datastore implementations where applicable.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.02289-07:00","updated_at":"2025-10-15T19:53:14.954-07:00","closed_at":"2025-10-15T19:53:14.954-07:00"}
{"id":"goread2-34","title":"Add HTTP handler integration tests","description":"Handlers have only 0.8% test coverage (constructors only). Add integration tests for:\n- FeedHandler: GetFeeds, AddFeed, DeleteFeed, GetArticles, MarkRead, ToggleStar, ImportOPML, ExportOPML\n- AuthHandler: Login, Callback, Logout, Me endpoints\n- PaymentHandler: CreateCheckoutSession, HandleWebhook, GetSubscriptionStatus\n- AdminHandler: all admin operations\nTests should verify:\n- Authentication/authorization requirements\n- Request validation and error responses\n- Correct HTTP status codes\n- Response format and content","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.159123-07:00","updated_at":"2025-10-15T19:46:51.159123-07:00"}
{"id":"goread2-35","title":"Add config validation tests","description":"Config validation (internal/config/validation.go) has 0% test coverage. Add tests for:\n- ValidateEnvironmentConfig with various configurations\n- OAuth credential validation (missing/empty/invalid)\n- Stripe credential validation (format checking for sk_, pk_, whsec_, price_ prefixes)\n- Strict vs non-strict mode differences\n- Admin email parsing\n- Error message formatting\nTests should cover both success and failure scenarios for local and production environments.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.295844-07:00","updated_at":"2025-10-15T19:46:51.295844-07:00"}
{"id":"goread2-36","title":"Add auth middleware error path tests","description":"Auth middleware has gaps in test coverage. Add tests for:\n- RequireAuthPage redirect behavior (line 26, currently 0%)\n- OptionalAuth with no session (line 59, currently 0%)\n- RequireAdmin with non-admin user (line 70, currently 0%)\n- Session validation failures\n- Context key handling edge cases\nCurrent coverage is 58.4% but key security paths are untested.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.435578-07:00","updated_at":"2025-10-15T19:46:51.435578-07:00"}
{"id":"goread2-37","title":"Add payment service tests","description":"Payment service is mostly untested. Add tests for:\n- CreateCheckoutSession with various user states\n- HandleWebhook with different Stripe event types\n- Subscription status checks\n- Payment failure scenarios\n- Webhook signature validation\n- Idempotency handling\nCurrent coverage shows most payment_service.go functions at 0%.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.571132-07:00","updated_at":"2025-10-15T19:46:51.571132-07:00"}
{"id":"goread2-38","title":"Add feed service error handling tests","description":"Feed service has gaps in error handling test coverage. Add tests for:\n- AddFeedForUser failure cases\n- RefreshFeeds with various error conditions\n- OPML import/export edge cases\n- Feed discovery failures\n- Article deduplication logic\n- Concurrent access patterns\nMany service methods have 0% or low coverage for error paths.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.715723-07:00","updated_at":"2025-10-15T19:46:51.715723-07:00"}
{"id":"goread2-39","title":"Add CSRF token edge case tests","description":"CSRF manager has coverage gaps. Add tests for:\n- Token expiration and cleanup (line 101, currently 0%)\n- Concurrent token generation\n- Token storage overflow\n- Invalid token formats\n- Token replay attacks\nCurrent coverage is 66.7% with cleanup function untested.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:51.857072-07:00","updated_at":"2025-10-15T19:46:51.857072-07:00"}
{"id":"goread2-4","title":"Add functionality to export OPML","description":"Add functionality to export OPML","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:38:46.239089-07:00","updated_at":"2025-10-14T18:42:42.42428-07:00","closed_at":"2025-10-14T18:42:42.42428-07:00"}
{"id":"goread2-40","title":"Add rate limiter cleanup and edge case tests","description":"Rate limiter has gaps in test coverage. Add tests for:\n- Cleanup function for expired entries (line 76, currently 0%)\n- Concurrent access patterns\n- Edge cases around time boundaries\n- Memory cleanup verification\n- Rate limit reset behavior\nCurrent coverage is 75% but cleanup mechanism is untested.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:52.002532-07:00","updated_at":"2025-10-15T19:46:52.002532-07:00"}
{"id":"goread2-41","title":"Add secrets manager tests","description":"Secrets manager (internal/secrets/secrets.go) has 0% test coverage. Add tests for:\n- GetOAuthCredentials with various sources (env vars, Secret Manager)\n- GetStripeCredentials validation\n- Environment detection (local vs production)\n- Fallback behavior when secrets are missing\n- Secret Manager API error handling\nCritical for security but completely untested.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:46:52.147231-07:00","updated_at":"2025-10-15T19:46:52.147231-07:00"}
{"id":"goread2-42","title":"Add end-to-end workflow integration tests","description":"Create integration tests for complete user workflows:\n- User registration → feed subscription → article reading → marking read/starred\n- OPML import → feed refresh → article access\n- Payment flow → subscription activation → feature access\n- Admin operations → user management → privilege granting\nThese tests should use real database instances and test the full stack, not just unit tests.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:47:06.813182-07:00","updated_at":"2025-10-15T19:47:06.813182-07:00"}
{"id":"goread2-43","title":"Improve subscription service test coverage","description":"Subscription service has 34.7% coverage with many error paths untested. Add tests for:\n- Trial expiration edge cases (lines 206-252)\n- Feed limit enforcement (lines 253-325)\n- Subscription status calculation (lines 326-436)\n- Edge cases around billing dates\n- Concurrent subscription updates\n- Stripe metadata handling\nFocus on error paths and edge cases that are currently at 32-52% coverage.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:47:06.937041-07:00","updated_at":"2025-10-15T19:47:06.937041-07:00"}
{"id":"goread2-44","title":"Add performance tests for feed refresh","description":"Add performance and load tests to ensure system scales properly:\n- Feed refresh with 100+ feeds\n- Concurrent user operations\n- Database query performance under load\n- Memory usage during bulk operations\n- Staggered refresh scheduler performance\n- Rate limiter under high load\nCreate benchmarks to track performance regressions.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T19:47:07.086554-07:00","updated_at":"2025-10-15T19:47:07.086554-07:00"}
{"id":"goread2-45","title":"CRITICAL: TLS Certificate Verification Disabled in Production","description":"**Location:** internal/services/feed_service.go:432\n\n**Issue:** The feed fetching service disables TLS certificate verification when running on App Engine (GAE_ENV=standard), making the application vulnerable to man-in-the-middle attacks when fetching RSS feeds.\n\n**Code:**\n```go\nif os.Getenv(\"GAE_ENV\") == \"standard\" {\n    transport.TLSClientConfig = \u0026tls.Config{\n        InsecureSkipVerify: true,\n    }\n}\n```\n\n**Risk:** HIGH - Attackers can intercept HTTPS connections and inject malicious content into RSS feeds.\n\n**Recommendation:** Bundle proper CA certificates or use App Engine's default transport instead of disabling verification.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-16T21:16:02.558276-07:00","updated_at":"2025-10-16T21:28:20.000421-07:00","closed_at":"2025-10-16T21:28:20.000421-07:00"}
{"id":"goread2-46","title":"MEDIUM: IP Address Spoofing Risk with ClientIP()","description":"**Location:** Multiple handlers use c.ClientIP() for rate limiting and audit logging\n\n**Issue:** Gin's ClientIP() method trusts X-Forwarded-For headers without validation, allowing attackers to spoof their IP address to bypass rate limits or poison audit logs.\n\n**Affected Files:**\n- internal/auth/rate_limiter.go:79\n- internal/handlers/admin_handler.go (multiple locations)\n- internal/handlers/feed_handler.go:236\n\n**Risk:** MEDIUM - Attackers can bypass rate limiting and obscure their identity in audit logs.\n\n**Recommendation:** \n1. Configure trusted proxies in Gin\n2. Validate X-Forwarded-For headers\n3. Consider using RemoteAddr for rate limiting as a fallback","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-16T21:16:20.707381-07:00","updated_at":"2025-10-17T15:56:13.797032-07:00","closed_at":"2025-10-17T15:56:13.797032-07:00"}
{"id":"goread2-47","title":"HIGH: SSRF Vulnerability in Feed URL Handling","description":"**Location:** internal/services/feed_service.go - AddFeedForUser()\n\n**Issue:** Feed URLs are not validated before being fetched, allowing Server-Side Request Forgery (SSRF) attacks. Attackers can:\n- Probe internal network services (localhost, 192.168.x.x, 10.x.x.x)\n- Access cloud metadata endpoints (169.254.169.254)\n- Scan internal ports\n\n**Code:** No validation on inputURL before passing to fetchFeed()\n\n**Risk:** HIGH - Internal network exposure, cloud credential theft\n\n**Recommendation:**\n1. Whitelist allowed URL schemes (http/https only)\n2. Blacklist private IP ranges (RFC1918, loopback, link-local)\n3. Blacklist cloud metadata IPs (169.254.169.254)\n4. Validate resolved IP addresses after DNS lookup","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-16T21:16:20.788133-07:00","updated_at":"2025-10-17T15:44:02.843942-07:00","closed_at":"2025-10-17T15:44:02.843942-07:00"}
{"id":"goread2-48","title":"MEDIUM: CSRF Tokens Stored in Memory (Lost on Restart)","description":"**Location:** internal/auth/csrf.go\n\n**Issue:** CSRF tokens are stored in an in-memory map that is cleared on application restart, invalidating all active user sessions without warning.\n\n**Code:**\n```go\ntype CSRFManager struct {\n    tokens map[string]*CSRFToken  // Lost on restart\n    mu     sync.RWMutex\n}\n```\n\n**Risk:** MEDIUM - User experience degradation, all users forced to re-authenticate after deployment\n\n**Recommendation:**\n1. Store CSRF tokens in database alongside sessions\n2. Or use session-based CSRF tokens derived from session ID\n3. Implement graceful token migration on restart","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-16T21:16:20.868137-07:00","updated_at":"2025-10-18T18:47:29.171872-07:00","closed_at":"2025-10-18T18:47:29.171872-07:00"}
{"id":"goread2-49","title":"MEDIUM: Stripe Webhook Accepts Empty Secret in Production","description":"**Location:** internal/handlers/payment_handler.go:80-83\n\n**Issue:** The Stripe webhook handler accepts requests even when STRIPE_WEBHOOK_SECRET is not configured, only logging a warning instead of rejecting the request.\n\n**Code:**\n```go\nif endpointSecret == \"\" {\n    fmt.Printf(\"WARNING: Webhook - STRIPE_WEBHOOK_SECRET not set\\n\")\n}\n// Continues to process webhook anyway\n```\n\n**Risk:** MEDIUM - Attackers can send fake webhook events to manipulate subscription status\n\n**Recommendation:**\n1. Reject webhook requests with 500 error if secret is not configured\n2. Make STRIPE_WEBHOOK_SECRET required when subscriptions are enabled\n3. Add startup validation to fail early if misconfigured","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-16T21:16:38.213612-07:00","updated_at":"2025-10-17T16:02:11.662859-07:00","closed_at":"2025-10-17T16:02:11.662859-07:00"}
{"id":"goread2-5","title":"Replace InsecureSkipVerify with proper CA certificate bundle on App Engine","description":"## Problem","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:38:46.278175-07:00","updated_at":"2025-10-14T18:42:42.424912-07:00","closed_at":"2025-10-14T18:42:42.424912-07:00"}
{"id":"goread2-50","title":"LOW: Session Fixation Vulnerability on Login","description":"**Location:** internal/handlers/auth_handler.go - Callback()\n\n**Issue:** Sessions are not regenerated after successful authentication, allowing session fixation attacks. An attacker can set a victim's session ID before login, then hijack the authenticated session.\n\n**Missing:** Session ID regeneration after authentication\n\n**Risk:** LOW - Requires attacker to set victim's session cookie before authentication\n\n**Recommendation:**\n1. Delete old session after successful OAuth callback\n2. Generate new session with new ID\n3. Update session cookie with new ID","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-16T21:16:38.290437-07:00","updated_at":"2025-10-16T21:16:38.290437-07:00"}
{"id":"goread2-51","title":"LOW: Sensitive Data May Appear in Debug Logs","description":"**Location:** Multiple files with fmt.Printf and log.Printf\n\n**Issue:** Debug logging statements throughout the codebase may inadvertently log sensitive data:\n- internal/database/schema.go:1013-1014 - Logs subscription details\n- internal/handlers/payment_handler.go:74-94 - Logs webhook payloads (may contain PII)\n- internal/services/payment_service.go - Logs Stripe API responses\n\n**Risk:** LOW - Sensitive data exposure in logs, potential compliance violations\n\n**Recommendation:**\n1. Audit all logging statements for sensitive data\n2. Redact PII, tokens, and secrets from logs\n3. Use structured logging with automatic redaction\n4. Implement log levels and disable debug logs in production","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-16T21:16:38.372059-07:00","updated_at":"2025-10-16T21:16:38.372059-07:00"}
{"id":"goread2-52","title":"MEDIUM: Admin Token Table Created But Never Used","description":"**Location:** internal/database/schema.go:242-250\n\n**Issue:** An admin_tokens table is created in the database schema but is never actually used for authentication. The ADMIN_TOKEN environment variable is referenced in docs but there's no code that validates it.\n\n**Code:** Table exists but no GetAdminToken() or ValidateAdminToken() methods\n\n**Risk:** MEDIUM - Incomplete security implementation, dead code creates confusion\n\n**Recommendation:**\n1. Either implement admin token authentication or remove the table\n2. If keeping: Add admin token middleware for CLI/API access\n3. If removing: Clean up schema and documentation references","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-16T21:16:57.439825-07:00","updated_at":"2025-10-18T18:41:25.172252-07:00","closed_at":"2025-10-18T18:41:25.172252-07:00"}
{"id":"goread2-53","title":"LOW: Missing GDPR Compliance Mechanisms","description":"**Location:** Privacy policy referenced but no data export/deletion\n\n**Issue:** The application references a privacy policy but lacks required GDPR compliance features:\n- No user data export functionality\n- No user account deletion endpoint  \n- No data retention policies implemented\n- User data (articles read/starred) persists indefinitely\n\n**Current State:**\n- Privacy policy page exists at /privacy\n- Users can view their data but cannot export it\n- No way to delete account and associated data\n\n**Risk:** LOW - Potential GDPR/privacy regulation violations in EU\n\n**Recommendation:**\n1. Add 'Export My Data' endpoint (JSON format)\n2. Add 'Delete My Account' endpoint (with confirmation)\n3. Implement data retention policies\n4. Add consent tracking for analytics/cookies\n5. Document data processing in privacy policy","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-16T21:16:57.51766-07:00","updated_at":"2025-10-16T21:16:57.51766-07:00"}
{"id":"goread2-54","title":"LOW: Rate Limiter Memory Grows Unbounded","description":"**Location:** internal/auth/rate_limiter.go:61-73\n\n**Issue:** The rate limiter's cleanupIPs() function completely clears the IP map every hour instead of removing only inactive IPs, but the map can still grow unbounded between cleanups.\n\n**Code:**\n```go\nfunc (rl *RateLimiter) cleanupIPs() {\n    ticker := time.NewTicker(1 * time.Hour)\n    for range ticker.C {\n        rl.mu.Lock()\n        rl.ips = make(map[string]*rate.Limiter)  // Clears all\n        rl.mu.Unlock()\n    }\n}\n```\n\n**Risk:** LOW - Memory exhaustion under sustained high-traffic or attack\n\n**Recommendation:**\n1. Track last access time for each IP\n2. Only remove IPs inactive for \u003e 1 hour\n3. Or implement LRU cache with max size","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-16T21:16:57.600334-07:00","updated_at":"2025-10-16T21:16:57.600334-07:00"}
{"id":"goread2-55","title":"MEDIUM: OAuth State Parameter Not Properly Validated","description":"**Location:** internal/handlers/auth_handler.go:46-50\n\n**Issue:** OAuth state parameter validation is incomplete. The code compares stored state with query parameter but doesn't check for:\n- State expiration (cookie is set for 10 min but never validated)\n- State uniqueness/replay attacks\n- Cryptographic quality of state generation\n\n**Code:**\n```go\nstoredState, err := c.Cookie(getOAuthStateCookieName())\nif err \\!= nil || storedState \\!= c.Query(\"state\") {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid state parameter\"})\n}\n```\n\n**Risk:** MEDIUM - OAuth CSRF attacks, authorization code interception\n\n**Recommendation:**\n1. Include timestamp in state and validate expiration\n2. Store state server-side with session\n3. Use cryptographically secure random state\n4. Implement one-time use (delete after validation)","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-16T21:17:16.969602-07:00","updated_at":"2025-10-18T18:40:07.978989-07:00","closed_at":"2025-10-18T18:40:07.978989-07:00"}
{"id":"goread2-56","title":"LOW: No Security Headers Configured","description":"**Location:** main.go - Missing security header middleware\n\n**Issue:** The application does not set recommended security HTTP headers:\n- X-Frame-Options (clickjacking protection)\n- X-Content-Type-Options (MIME sniffing protection)  \n- X-XSS-Protection (XSS filter)\n- Strict-Transport-Security (HSTS)\n- Content-Security-Policy (CSP)\n- Referrer-Policy (referrer leakage)\n\n**Risk:** LOW - Missing defense-in-depth layers\n\n**Recommendation:**\nAdd security headers middleware:\n```go\nr.Use(func(c *gin.Context) {\n    c.Header(\"X-Frame-Options\", \"DENY\")\n    c.Header(\"X-Content-Type-Options\", \"nosniff\")\n    c.Header(\"X-XSS-Protection\", \"1; mode=block\")\n    c.Header(\"Referrer-Policy\", \"strict-origin-when-cross-origin\")\n    if isProduction {\n        c.Header(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains\")\n    }\n    c.Next()\n})\n```","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-16T21:17:17.060638-07:00","updated_at":"2025-10-16T21:17:17.060638-07:00"}
{"id":"goread2-57","title":"MEDIUM: No Protection Against Credential Stuffing Attacks","description":"**Location:** Authentication flow lacks brute force protection\n\n**Issue:** While rate limiting exists for API endpoints, there are no specific protections against credential stuffing attacks on the OAuth flow:\n- No CAPTCHA on login attempts\n- No account lockout after failed attempts\n- No suspicious login detection\n- No notification of new device logins\n\n**Risk:** MEDIUM - Account takeover if OAuth credentials are compromised\n\n**Recommendation:**\n1. Implement progressive rate limiting on auth endpoints\n2. Add device fingerprinting\n3. Email notifications for new device logins  \n4. Consider adding CAPTCHA after N failed attempts\n5. Monitor for distributed login attempts from same user\n6. Log geographic anomalies in login patterns","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T21:17:17.140074-07:00","updated_at":"2025-10-18T18:38:50.210778-07:00","closed_at":"2025-10-18T18:38:50.210778-07:00"}
{"id":"goread2-58","title":"Optimize UserArticle query to reduce Firestore reads by 30-40%","description":"**Location:** internal/database/datastore.go:806-827 (GetUserArticlesPaginated)\n\n**Problem:**\nThe GetUserArticlesPaginated function fetches ALL UserArticle entities for a user from Firestore, then filters in memory. For users with many articles, this is extremely expensive.\n\n**Current Code:**\n```go\nquery := datastore.NewQuery(\"UserArticle\")\n    .FilterField(\"user_id\", \"=\", int64(userID))\n// Fetches entire table for this user!\n```\n\n**Impact:**\n- User with 1000 articles = 1 massive Datastore read on every page load\n- This is the #3 source of Firestore read costs\n- Estimated 1.1M reads/year per active user\n- Called on every article view (multiple times per day)\n\n**Solution:**\n1. Only fetch UserArticle entities for articles from user's current feeds\n2. Build article IDs list from feed articles first\n3. Batch query UserArticle by articleID + userID in chunks of 500\n\n**Pseudo-code:**\n```go\n// Build list of article IDs from feeds\narticleIDs := make([]int64, 0, len(articles))\nfor _, article := range articles {\n    articleIDs = append(articleIDs, int64(article.ID))\n}\n\n// Batch query in chunks of 500\nkeys := make([]*datastore.Key, len(articleIDs))\nfor i, articleID := range articleIDs {\n    keys[i] = datastore.NameKey(\"UserArticle\", \n        fmt.Sprintf(\"%d_%d\", userID, articleID), nil)\n}\n// Use GetMulti() for batch read\n```\n\n**Expected Savings:**\n- 30-40% reduction in Firestore reads for article-heavy users\n- Faster page loads (less data transfer)\n- Scales better with article count\n\n**Priority:** P1 - Second highest source of read costs after sessions","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-17T16:12:21.438278-07:00","updated_at":"2025-10-17T20:13:12.445762-07:00","closed_at":"2025-10-17T20:13:12.445762-07:00"}
{"id":"goread2-59","title":"Add caching for unread counts to reduce Firestore reads by 30-50%","description":"**Location:** internal/database/datastore.go:1081-1212 (GetUserUnreadCounts)\n\n**Problem:**\nGetUserUnreadCounts is THE most expensive database operation, causing 20-150 Firestore reads per call. It's called on every page load to display unread badge counts.\n\n**Current Behavior:**\nFor a user with 20 feeds and 500 articles per feed:\n1. GetUserFeeds: 1 read\n2. For each of 20 feeds:\n   - GetArticles query: 20 reads\n   - GetMulti for user article statuses in 1000-article chunks: ~100 reads\n3. **Total: ~121 reads per page load**\n\n**Impact:**\n- #2 source of Firestore read costs\n- Estimated 2.2M reads/year per daily active user\n- Called on EVERY page navigation\n- Uses parallel goroutines with no circuit breaker\n\n**Solution: In-Memory Cache with Background Refresh**\n\n1. Create UnreadCountCache in internal/cache/unread_cache.go:\n```go\ntype UnreadCache struct {\n    counts    map[int]*UnreadCountData // userID → counts\n    mu        sync.RWMutex\n    refreshAt map[int]time.Time\n    ttl       time.Duration // 60-120 seconds\n}\n```\n\n2. Cache Strategy:\n   - Serve cached counts immediately (fast response)\n   - Refresh in background every 60-120 seconds\n   - Invalidate on manual article actions (mark read/star)\n   - Eventual consistency acceptable (counts refresh soon)\n\n3. Implementation:\n```go\nfunc (uc *UnreadCache) GetUnreadCounts(userID int) (*UnreadCountData, bool) {\n    uc.mu.RLock()\n    defer uc.mu.RUnlock()\n    \n    if data, exists := uc.counts[userID]; exists {\n        if time.Now().Before(uc.refreshAt[userID]) {\n            return data, true // Cache hit\n        }\n    }\n    return nil, false // Cache miss\n}\n\nfunc (uc *UnreadCache) RefreshInBackground(userID int, db database.Database) {\n    go func() {\n        counts, err := db.GetUserUnreadCounts(userID)\n        if err == nil {\n            uc.SetCounts(userID, counts)\n        }\n    }()\n}\n```\n\n**Expected Savings:**\n- 50-70% reduction in Firestore reads for this endpoint\n- From ~121 reads/call to ~1-2 reads/call (background refresh)\n- Faster page loads (instant cache response)\n- Better user experience (no loading spinner)\n\n**Trade-offs:**\n- Counts may be stale by up to 60-120 seconds\n- Acceptable: unread counts don't need real-time accuracy\n- Manual actions (mark read) trigger immediate invalidation\n\n**Priority:** P1 - Second most expensive operation after sessions","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-17T16:12:42.799435-07:00","updated_at":"2025-10-17T20:27:06.855357-07:00","closed_at":"2025-10-17T20:27:06.855357-07:00"}
{"id":"goread2-6","title":"Add functionality to export OPML","description":"Add functionality to export OPML","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:41:11.42135-07:00","updated_at":"2025-10-14T18:42:42.425099-07:00","closed_at":"2025-10-14T18:42:42.425099-07:00"}
{"id":"goread2-60","title":"Add request-scoped caching to eliminate duplicate GetUserFeeds calls","description":"**Location:** Multiple handlers calling GetUserFeeds multiple times per request\n\n**Problem:**\nGetUserFeeds is called multiple times within a single request chain, causing duplicate Firestore reads. This is particularly wasteful since user's feed list rarely changes.\n\n**Example Request Flow:**\n```\nGET /api/feeds → GetFeeds handler\n  ├─ GetUserFeeds() [READ 1]\n  └─ GetUnreadCounts()\n      └─ GetUserFeeds() [READ 2 - DUPLICATE!]\n```\n\n**Impact:**\n- #4 source of Firestore read costs\n- Estimated 500K+ duplicate reads/year\n- Called from multiple endpoints:\n  * internal/handlers/feed_handler.go:39 (GetFeeds)\n  * internal/handlers/feed_handler.go:152 (GetArticles)\n  * internal/handlers/feed_handler.go:287 (DebugFeed)\n  * internal/handlers/feed_handler.go:547 (GetAccountStats)\n  * internal/services/feed_service.go:343 (GetUserUnreadCounts)\n\n**Solution: Request-Scoped Cache**\n\nCreate middleware that adds a request-scoped cache to gin.Context:\n\n```go\n// internal/middleware/request_cache.go\ntype RequestCache struct {\n    userFeeds map[int][]database.Feed\n    mu        sync.RWMutex\n}\n\nfunc RequestCacheMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        cache := \u0026RequestCache{\n            userFeeds: make(map[int][]database.Feed),\n        }\n        c.Set(\"request_cache\", cache)\n        c.Next()\n    }\n}\n\n// Helper function to get cached user feeds\nfunc GetCachedUserFeeds(c *gin.Context, userID int, db database.Database) ([]database.Feed, error) {\n    cache, exists := c.Get(\"request_cache\")\n    if !exists {\n        // No cache, fetch directly\n        return db.GetUserFeeds(userID)\n    }\n    \n    rc := cache.(*RequestCache)\n    rc.mu.RLock()\n    if feeds, cached := rc.userFeeds[userID]; cached {\n        rc.mu.RUnlock()\n        return feeds, nil // Cache hit!\n    }\n    rc.mu.RUnlock()\n    \n    // Cache miss - fetch and store\n    feeds, err := db.GetUserFeeds(userID)\n    if err == nil {\n        rc.mu.Lock()\n        rc.userFeeds[userID] = feeds\n        rc.mu.Unlock()\n    }\n    return feeds, err\n}\n```\n\n**Implementation Steps:**\n1. Create request cache middleware\n2. Add to API route group in main.go\n3. Update all handlers to use GetCachedUserFeeds()\n4. Test that cache is scoped per-request (no cross-contamination)\n\n**Expected Savings:**\n- 15-20% reduction in duplicate reads\n- Eliminates 2-3 reads per request\n- Faster response times (no duplicate DB calls)\n- Zero memory overhead (cache cleared after request)\n\n**Priority:** P2 - Lower priority than queries that fetch ALL data, but still valuable","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-17T16:13:03.133134-07:00","updated_at":"2025-10-18T12:37:13.015559-07:00","closed_at":"2025-10-18T12:37:13.015559-07:00"}
{"id":"goread2-7","title":"Test issue","description":"Test description","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-14T18:41:21.461659-07:00","updated_at":"2025-10-14T18:42:42.425255-07:00","closed_at":"2025-10-14T18:42:42.425255-07:00"}
{"id":"goread2-8","title":"Add functionality to export OPML","description":"Add functionality to export OPML","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-14T18:43:55.243125-07:00","updated_at":"2025-10-15T16:58:51.363408-07:00","closed_at":"2025-10-15T16:58:51.363408-07:00","external_ref":"gh-22"}
{"id":"goread2-9","title":"Replace InsecureSkipVerify with proper CA certificate bundle on App Engine","description":"Currently, TLS certificate verification is disabled on App Engine (InsecureSkipVerify: true) as a workaround. This needs to be fixed by bundling proper CA certificates.","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-14T18:43:55.289834-07:00","updated_at":"2025-10-14T18:43:55.312482-07:00","external_ref":"gh-21"}
